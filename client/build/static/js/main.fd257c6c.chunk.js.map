{"version":3,"sources":["store/AuthReducer.js","utils/GraphqlQueries.js","components/LikeButton.js","components/DeleteButton.js","components/PostCard.js","components/CreatePost.js","pages/Home.js","components/Error.js","pages/Login.js","pages/Register.js","components/MenuBar.js","components/CreateComment.js","components/CommentCard.js","components/SinglePost.js","utils/PrivateRoute.js","App.js","index.js"],"names":["JWT_TOKEN","initialState","user","token","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","actionTypes","AuthContext","createContext","login","logout","useAuth","useContext","AuthReducer","state","action","type","payload","AuthProvider","children","useReducer","dispatch","value","cred","setItem","Provider","FETCH_POSTS_QUERY","gql","REGISTER_USER","LOGIN_USER","CREATE_POST","LIKE_POST","FETCH_SINGLE_POST","DELETE_POST","DELETE_COMMENT","CREATE_COMMENT","LikeButton","post","likes","likeCount","id","useState","liked","setLiked","useHistory","useMutation","variables","postId","likePost","useEffect","find","like","userName","likeButton","Button","color","Icon","name","basic","to","as","Link","Popup","content","inverted","trigger","labelPosition","onClick","Label","pointing","DeleteButton","cb","commentId","isOpen","setIsOpen","mutation","update","proxy","updatedPosts","readQuery","query","posts","filter","writeQuery","data","deleteHandler","floated","style","margin","Confirm","size","open","onCancel","onConfirm","PostCard","commentCount","createdAt","body","Card","fluid","Content","Image","src","Header","Meta","moment","fromNow","Description","extra","CreatePost","setbody","error","setError","result","createPost","onError","err","graphQLErrors","message","Form","onSubmit","event","preventDefault","Field","Input","placeholder","onChange","target","className","Home","useQuery","loading","Grid","columns","Row","Column","TransitionGroup","map","marginBottom","Error","errValue","Login","setUserName","password","setPassword","errors","setErrors","history","_","userData","userLogin","push","extensions","loginUser","e","label","Object","keys","values","Register","email","setEmail","confirmPassword","setConfirmPassword","addUser","MenuBar","Menu","secondary","Item","NavLink","exact","position","CreateComment","commentRef","useRef","createComment","current","blur","ref","disabled","padding","CommentCard","comment","SinglePost","useParams","getPost","comments","width","PrivateRoute","Component","component","rest","render","props","App","Container","path","httpLink","createHttpLink","uri","process","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fd257c6c.chunk.js","sourcesContent":["import { createContext, useContext, useReducer } from \"react\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nconst JWT_TOKEN = \"MEGNET_CHAT_TOKEN\";\r\n\r\nconst initialState = {\r\n  user: null,\r\n};\r\n\r\nconst token = localStorage.getItem(JWT_TOKEN);\r\n\r\nif (token) {\r\n  const decodedToken = jwtDecode(token);\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem(JWT_TOKEN);\r\n  } else {\r\n    initialState.user = decodedToken;\r\n  }\r\n}\r\n\r\nconst actionTypes = {\r\n  LOGIN: \"LOGIN\",\r\n  LOGOUT: \"LOGOUT\",\r\n};\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: () => {},\r\n  logout: () => {},\r\n});\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nconst AuthReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOGIN:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case actionTypes.LOGOUT:\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AuthReducer, initialState);\r\n\r\n  const login = (cred) => {\r\n    localStorage.setItem(JWT_TOKEN, cred.token);\r\n    dispatch({\r\n      type: actionTypes.LOGIN,\r\n      payload: cred,\r\n    });\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(JWT_TOKEN);\r\n    dispatch({\r\n      type: actionTypes.LOGOUT,\r\n    });\r\n  };\r\n\r\n  const value = {\r\n    user: state.user,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  {\r\n    posts: getposts {\r\n      id\r\n      body\r\n      userName\r\n      createdAt\r\n      comments {\r\n        body\r\n        createdAt\r\n        userName\r\n      }\r\n      commentCount\r\n      likes {\r\n        userName\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const REGISTER_USER = gql`\r\n  mutation registerUser(\r\n    $userName: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    registerUser(\r\n      userInput: {\r\n        userName: $userName\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      userName\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation userLogin($userName: String!, $password: String!) {\r\n    userLogin(userName: $userName, password: $password) {\r\n      id\r\n      email\r\n      userName\r\n      token\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_POST = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      userName\r\n      createdAt\r\n      body\r\n      likes {\r\n        id\r\n        userName\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        userName\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LIKE_POST = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        userName\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const FETCH_SINGLE_POST = gql`\r\n  query getPost($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      id\r\n      body\r\n      userName\r\n      likeCount\r\n      likes {\r\n        userName\r\n      }\r\n      comments {\r\n        id\r\n        userName\r\n        createdAt\r\n        body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_POST = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`;\r\n\r\nexport const DELETE_COMMENT = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        userName\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_COMMENT = gql`\r\n  mutation createComment($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        userName\r\n        body\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button, Icon, Label, Popup } from \"semantic-ui-react\";\r\nimport { LIKE_POST } from \"../utils/GraphqlQueries\";\r\n\r\nfunction LikeButton({ post: { likes, likeCount, id }, user }) {\r\n  const [liked, setLiked] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const [likePost] = useMutation(LIKE_POST, {\r\n    variables: { postId: id },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.userName === user.userName)) {\r\n      setLiked(true);\r\n    } else setLiked(false);\r\n  }, [user, likes]);\r\n\r\n  let likeButton = user ? (\r\n    liked ? (\r\n      <Button color=\"pink\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    ) : (\r\n      <Button basic color=\"pink\">\r\n        <Icon name=\"heart\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button basic color=\"pink\" to=\"/login\" as={Link}>\r\n      <Icon name=\"heart\" />\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <Popup\r\n      content={liked ? \"Unlike\" : \"Like\"}\r\n      inverted\r\n      trigger={\r\n        <Button as=\"div\" labelPosition=\"right\" onClick={user && likePost}>\r\n          {likeButton}\r\n          <Label basic color=\"pink\" pointing=\"left\">\r\n            {likeCount}\r\n          </Label>\r\n        </Button>\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default LikeButton;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Confirm, Icon } from \"semantic-ui-react\";\r\nimport {\r\n  DELETE_COMMENT,\r\n  DELETE_POST,\r\n  FETCH_POSTS_QUERY,\r\n} from \"../utils/GraphqlQueries\";\r\n\r\nfunction DeleteButton({ postId, cb, commentId }) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const mutation = commentId ? DELETE_COMMENT : DELETE_POST;\r\n\r\n  const [deleteHandler] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setIsOpen(false);\r\n      if (!commentId) {\r\n        const data = proxy.readQuery({ query: FETCH_POSTS_QUERY });\r\n        const updatedPosts = data.posts.filter((post) => post.id !== postId);\r\n        proxy.writeQuery({\r\n          query: FETCH_POSTS_QUERY,\r\n          data: { posts: updatedPosts },\r\n        });\r\n      }\r\n      if (cb) cb();\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        as=\"div\"\r\n        floated=\"right\"\r\n        color=\"red\"\r\n        onClick={() => setIsOpen(true)}\r\n      >\r\n        <Icon name=\"trash\" style={{ margin: \"0\" }} />\r\n      </Button>\r\n      <Confirm\r\n        size=\"mini\"\r\n        open={isOpen}\r\n        onCancel={() => setIsOpen(false)}\r\n        onConfirm={deleteHandler}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Button, Card, Icon, Image, Label, Popup } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nexport function PostCard({ post }) {\r\n  const {\r\n    id,\r\n    userName,\r\n    likes,\r\n    likeCount,\r\n    commentCount,\r\n    createdAt,\r\n    body,\r\n  } = post;\r\n\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Popup\r\n          inverted\r\n          content={userName}\r\n          trigger={\r\n            <Image\r\n              floated=\"right\"\r\n              size=\"mini\"\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n            />\r\n          }\r\n        />\r\n\r\n        <Card.Header as={Link} to={`/posts/${id}`}>\r\n          {userName}\r\n        </Card.Header>\r\n        <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div>\r\n          <LikeButton user={user} post={{ likes, likeCount, id }} />\r\n          <Popup\r\n            inverted\r\n            content=\"Comment on Post\"\r\n            trigger={\r\n              <Button as={Link} labelPosition=\"right\" to={`/posts/${id}`}>\r\n                <Button basic color=\"teal\">\r\n                  <Icon name=\"comments\" />\r\n                </Button>\r\n                <Label basic color=\"teal\" pointing=\"left\">\r\n                  {commentCount}\r\n                </Label>\r\n              </Button>\r\n            }\r\n          />\r\n\r\n          {user && user.userName === userName && <DeleteButton postId={id} />}\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport { CREATE_POST, FETCH_POSTS_QUERY } from \"../utils/GraphqlQueries\";\r\n\r\nexport function CreatePost() {\r\n  const [body, setbody] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const [createPost] = useMutation(CREATE_POST, {\r\n    variables: {\r\n      body: body,\r\n    },\r\n    update: (proxy, result) => {\r\n      const data = proxy.readQuery({ query: FETCH_POSTS_QUERY });\r\n      proxy.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: { posts: [result.data.createPost, ...data.posts] },\r\n      });\r\n    },\r\n    onError(err) {\r\n      setError(err.graphQLErrors[0].message);\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    createPost();\r\n    setbody(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={handleSubmit}>\r\n        <h2>Create a Post</h2>\r\n        <Form.Field>\r\n          <Form.Input\r\n            placeholder=\"Say Hello...\"\r\n            type=\"text\"\r\n            value={body}\r\n            onChange={(event) => setbody(event.target.value)}\r\n            error={error ? true : false}\r\n          />\r\n          <Button type=\"submit\" color=\"pink\">\r\n            Post\r\n          </Button>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            <li>{error}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Grid, TransitionGroup } from \"semantic-ui-react\";\r\nimport { PostCard } from \"../components/PostCard\";\r\nimport { CreatePost } from \"../components/CreatePost\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\nimport { FETCH_POSTS_QUERY } from \"../utils/GraphqlQueries\";\r\n\r\nfunction Home() {\r\n  const { user } = useAuth();\r\n\r\n  const { data: { posts } = {}, loading } = useQuery(FETCH_POSTS_QUERY);\r\n\r\n  return (\r\n    <Grid columns=\"2\" className=\"posts\">\r\n      <Grid.Row>\r\n        <h1>Recent Posts</h1>\r\n      </Grid.Row>\r\n      {user && (\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <CreatePost />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      )}\r\n      <Grid.Row>\r\n        {loading ? (\r\n          <h2>Posts are loading...</h2>\r\n        ) : (\r\n          <TransitionGroup>\r\n            {posts &&\r\n              posts.map((post) => {\r\n                return (\r\n                  <Grid.Column style={{ marginBottom: \"1.2rem\" }} key={post.id}>\r\n                    <PostCard post={post} />\r\n                  </Grid.Column>\r\n                );\r\n              })}\r\n          </TransitionGroup>\r\n        )}\r\n      </Grid.Row>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nfunction Error({ errValue }) {\r\n  return (\r\n    <div className=\"ui error message\">\r\n      <ul className=\"list\">\r\n        <li>{errValue}</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Error;\r\n","import { gql, useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport Error from \"../components/Error\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\nimport { LOGIN_USER } from \"../utils/GraphqlQueries\";\r\n\r\nfunction Login() {\r\n  const { login } = useAuth();\r\n\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const history = useHistory();\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { userLogin: userData } }) {\r\n      login(userData);\r\n      history.push(\"/\");\r\n    },\r\n    onError(error) {\r\n      setErrors(error.graphQLErrors[0].extensions.errors);\r\n    },\r\n    variables: {\r\n      userName: userName,\r\n      password: password,\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    loginUser();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <Form onSubmit={handleSubmit} className={loading ? \"loading\" : \"\"}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          type=\"text\"\r\n          value={userName}\r\n          onChange={(e) => setUserName(e.target.value)}\r\n          error={errors.userName ? true : false}\r\n          placeholder=\"Enter Username\"\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          error={errors.password ? true : false}\r\n          placeholder=\"Enter Password\"\r\n        />\r\n        <Button type=\"submit\" color=\"pink\">\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors) &&\r\n        Object.values(errors).map((errValue) => (\r\n          <Error key={errValue} errValue={errValue} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Form } from \"semantic-ui-react\";\r\nimport Error from \"../components/Error\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\nimport { REGISTER_USER } from \"../utils/GraphqlQueries\";\r\n\r\nfunction Register() {\r\n  const { login } = useAuth();\r\n\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const history = useHistory();\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { userLogin: userData } }) {\r\n      login(userData);\r\n      history.push(\"/\");\r\n    },\r\n    onError(error) {\r\n      setErrors(error.graphQLErrors[0].extensions.errors);\r\n    },\r\n    variables: {\r\n      userName: userName,\r\n      email: email,\r\n      password: password,\r\n      confirmPassword: confirmPassword,\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addUser();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form\">\r\n      <Form onSubmit={handleSubmit} className={loading ? \"loading\" : \"\"}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          type=\"text\"\r\n          value={userName}\r\n          onChange={(e) => setUserName(e.target.value)}\r\n          error={errors.userName ? true : false}\r\n          placeholder=\"Enter Username\"\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          type=\"email\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          error={errors.email ? true : false}\r\n          placeholder=\"Enter Email\"\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n          error={errors.password ? true : false}\r\n          placeholder=\"Enter Password\"\r\n        />\r\n        <Form.Input\r\n          label=\"Confirm Password\"\r\n          type=\"password\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          error={errors.confirmPassword ? true : false}\r\n          placeholder=\"Confirm Password\"\r\n        />\r\n        <Button type=\"submit\" color=\"pink\">\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors) &&\r\n        Object.values(errors).map((errValue) => (\r\n          <Error key={errValue} errValue={errValue} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Button, Menu } from \"semantic-ui-react\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\n\r\nconst MenuBar = () => {\r\n  const { user, logout } = useAuth();\r\n\r\n  if (!user) {\r\n    return (\r\n      <Menu pointing secondary size=\"massive\" color=\"pink\">\r\n        <Menu.Item name=\"Home\" as={NavLink} to=\"/\" exact />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item name=\"Login\" as={NavLink} to=\"/login\" />\r\n          <Menu.Item name=\"Register\" as={NavLink} to=\"/register\" />\r\n        </Menu.Menu>\r\n      </Menu>\r\n    );\r\n  } else {\r\n    return (\r\n      <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n        <Menu.Item name={user.userName} as={NavLink} to=\"/\" exact />\r\n        <Menu.Menu position=\"right\">\r\n          <Menu.Item\r\n            name=\"logout\"\r\n            as={Button}\r\n            size=\"huge\"\r\n            onClick={() => logout()}\r\n          />\r\n        </Menu.Menu>\r\n      </Menu>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MenuBar;\r\n","import { useMutation } from \"@apollo/client\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Card, Form } from \"semantic-ui-react\";\r\nimport { CREATE_COMMENT } from \"../utils/GraphqlQueries\";\r\n\r\nexport function CreateComment({ postId }) {\r\n  const [body, setbody] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const commentRef = useRef();\r\n\r\n  const [createComment] = useMutation(CREATE_COMMENT, {\r\n    variables: {\r\n      postId,\r\n      body,\r\n    },\r\n\r\n    onError(err) {\r\n      setError(err.graphQLErrors[0].message);\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    createComment();\r\n    setbody(\"\");\r\n    commentRef.current.blur();\r\n  };\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Form onSubmit={handleSubmit}>\r\n          <h4>Create a Comment</h4>\r\n          <div className=\"ui action input fluid\">\r\n            <input\r\n              placeholder=\"Comment...\"\r\n              type=\"text\"\r\n              value={body}\r\n              onChange={(event) => setbody(event.target.value)}\r\n              ref={commentRef}\r\n            />\r\n            <button className=\"ui button pink\" type=\"submit\" disabled={!body}>\r\n              Comment\r\n            </button>\r\n          </div>\r\n        </Form>\r\n        {error && (\r\n          <div className=\"ui error message\" style={{ padding: \".4rem 1.2rem\" }}>\r\n            <ul className=\"list\">\r\n              <li>{error}</li>\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Card } from \"semantic-ui-react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport moment from \"moment\";\r\n\r\nexport default function CommentCard({ comment, user, postId }) {\r\n  const { userName, body, createdAt, id } = comment;\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        {user && user.userName === userName && (\r\n          <DeleteButton postId={postId} commentId={id} />\r\n        )}\r\n        <Card.Header>{userName}</Card.Header>\r\n\r\n        <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n        <Card.Description>{body}</Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n}\r\n","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Button, Card, Grid, Icon, Image, Label } from \"semantic-ui-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\nimport { FETCH_SINGLE_POST } from \"../utils/GraphqlQueries\";\r\nimport LikeButton from \"./LikeButton\";\r\nimport moment from \"moment\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport { CreateComment } from \"./CreateComment\";\r\nimport CommentCard from \"./CommentCard\";\r\n\r\nfunction SinglePost() {\r\n  const { user } = useAuth();\r\n\r\n  const { postId } = useParams();\r\n\r\n  const { data: { getPost } = {} } = useQuery(FETCH_SINGLE_POST, {\r\n    variables: {\r\n      postId: postId,\r\n    },\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  const cb = () => {\r\n    history.push(\"/\");\r\n  };\r\n\r\n  if (!getPost) {\r\n    return <p>Loading...</p>;\r\n  } else {\r\n    const {\r\n      id,\r\n      body,\r\n      createdAt,\r\n      userName,\r\n      comments,\r\n      likes,\r\n      commentCount,\r\n      likeCount,\r\n    } = getPost;\r\n\r\n    return (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column width={2}>\r\n            <Image\r\n              floated=\"right\"\r\n              size=\"small\"\r\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\r\n            />\r\n          </Grid.Column>\r\n          <Grid.Column width={10}>\r\n            <Card fluid>\r\n              <Card.Content>\r\n                <Card.Header>{userName}</Card.Header>\r\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\r\n                <Card.Description>{body}</Card.Description>\r\n              </Card.Content>\r\n              <hr />\r\n              <Card.Content extra>\r\n                <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n                <Button as=\"div\" labelPosition=\"right\" onClick={() => {}}>\r\n                  <Button basic color=\"teal\">\r\n                    <Icon name=\"comments\" />\r\n                  </Button>\r\n                  <Label basic color=\"teal\" pointing=\"left\">\r\n                    {commentCount}\r\n                  </Label>\r\n                </Button>\r\n                {user && user.userName === userName && (\r\n                  <DeleteButton postId={id} cb={cb} />\r\n                )}\r\n              </Card.Content>\r\n            </Card>\r\n            {user && <CreateComment postId={id} />}\r\n            {comments.map((comment) => (\r\n              <CommentCard\r\n                key={comment.id}\r\n                comment={comment}\r\n                user={user}\r\n                postId={id}\r\n              />\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SinglePost;\r\n","import React from \"react\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { useAuth } from \"../store/AuthReducer\";\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { user } = useAuth();\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import { Route, Switch } from \"react-router-dom\";\nimport { Container } from \"semantic-ui-react\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport MenuBar from \"./components/MenuBar\";\nimport SinglePost from \"./components/SinglePost\";\n\nimport \"./App.css\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\n\nfunction App() {\n  return (\n    <Container>\n      <MenuBar />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/posts/:postId\" component={SinglePost} />\n        <PrivateRoute path=\"/register\" component={Register} />\n        <PrivateRoute path=\"/login\" component={Login} />\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  createHttpLink,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { setContext } from \"apollo-link-context\";\nimport { AuthProvider } from \"./store/AuthReducer\";\n\nimport App from \"./App\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_SERVER_URI,\n});\n\nconst authLink = setContext(() => {\n  const token = localStorage.getItem(\"MEGNET_CHAT_TOKEN\");\n  return {\n    headers: {\n      Authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <AuthProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </AuthProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}